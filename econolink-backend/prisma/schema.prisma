generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                                                String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  name                                              String         @unique @db.VarChar(100)
  type                                              account_type
  balance                                           Decimal?       @default(0.00) @db.Decimal(15, 2)
  color                                             String?        @default("#3B82F6") @db.VarChar(7)
  icon                                              String?        @default("üí∞") @db.VarChar(10)
  is_active                                         Boolean?       @default(true)
  user_id                                           String         @db.VarChar(50)
  created_at                                        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime?      @default(now()) @db.Timestamptz(6)
  users                                             users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goals                                             goals[]
  transactions_transactions_account_idToaccounts    transactions[] @relation("transactions_account_idToaccounts")
  transactions_transactions_to_account_idToaccounts transactions[] @relation("transactions_to_account_idToaccounts")

  @@index([user_id], map: "idx_accounts_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model budgets {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  name        String         @db.VarChar(100)
  amount      Decimal        @db.Decimal(15, 2)
  period      budget_period? @default(MONTHLY)
  start_date  DateTime       @db.Timestamptz(6)
  end_date    DateTime?      @db.Timestamptz(6)
  spent       Decimal?       @default(0.00) @db.Decimal(15, 2)
  alert_at    Decimal?       @db.Decimal(5, 2)
  category_id String?        @db.VarChar(50)
  user_id     String         @db.VarChar(50)
  created_at  DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?      @default(now()) @db.Timestamptz(6)
  categories  categories?    @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, start_date, end_date], map: "idx_budgets_user_period")
}

model categories {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  name             String           @unique @db.VarChar(100)
  description      String?
  color            String?          @default("#6B7280") @db.VarChar(7)
  icon             String?          @default("üìÅ") @db.VarChar(10)
  type             transaction_type
  parent_id        String?          @db.VarChar(50)
  user_id          String           @db.VarChar(50)
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?        @default(now()) @db.Timestamptz(6)
  budgets          budgets[]
  categories       categories?      @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories categories[]     @relation("categoriesTocategories")
  users            users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions     transactions[]

  @@index([user_id, type], map: "idx_categories_user_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model goals {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  name                String    @db.VarChar(100)
  description         String?
  target              Decimal   @db.Decimal(15, 2)
  current             Decimal?  @default(0.00) @db.Decimal(15, 2)
  deadline            DateTime? @db.Timestamptz(6)
  color               String?   @default("#10B981") @db.VarChar(7)
  icon                String?   @default("üéØ") @db.VarChar(10)
  auto_transfer       Boolean?  @default(false)
  transfer_account_id String?   @db.VarChar(50)
  user_id             String    @db.VarChar(50)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  accounts            accounts? @relation(fields: [transfer_account_id], references: [id], onUpdate: NoAction)
  users               users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, deadline], map: "idx_goals_user_deadline")
}

model reminders {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  title          String    @db.VarChar(200)
  description    String?
  due_date       DateTime  @db.Timestamptz(6)
  is_completed   Boolean?  @default(false)
  is_recurring   Boolean?  @default(false)
  recurring_rule Json?
  user_id        String    @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, due_date], map: "idx_reminders_user_due")
}

model sync_states {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  user_id     String    @unique @db.VarChar(50)
  last_sync   DateTime? @default(now()) @db.Timestamptz(6)
  pending_ops Json?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id                                            String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  amount                                        Decimal          @db.Decimal(15, 2)
  description                                   String           @db.VarChar(500)
  date                                          DateTime?        @default(now()) @db.Timestamptz(6)
  type                                          transaction_type
  notes                                         String?
  location                                      String?          @db.VarChar(255)
  receipt_image                                 String?          @db.VarChar(500)
  is_recurring                                  Boolean?         @default(false)
  recurring_id                                  String?          @db.VarChar(50)
  recurring_rule                                Json?
  account_id                                    String           @db.VarChar(50)
  to_account_id                                 String?          @db.VarChar(50)
  category_id                                   String?          @db.VarChar(50)
  user_id                                       String           @db.VarChar(50)
  local_id                                      String?          @unique @db.VarChar(100)
  is_synced                                     Boolean?         @default(true)
  last_sync_at                                  DateTime?        @db.Timestamptz(6)
  created_at                                    DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime?        @default(now()) @db.Timestamptz(6)
  accounts_transactions_account_idToaccounts    accounts         @relation("transactions_account_idToaccounts", fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  categories                                    categories?      @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  accounts_transactions_to_account_idToaccounts accounts?        @relation("transactions_to_account_idToaccounts", fields: [to_account_id], references: [id], onUpdate: NoAction)
  users                                         users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([account_id, date(sort: Desc)], map: "idx_transactions_account_date")
  @@index([category_id, user_id], map: "idx_transactions_category_user")
  @@index([type, date], map: "idx_transactions_type_date")
  @@index([user_id, date(sort: Desc)], map: "idx_transactions_user_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(50)
  email        String         @unique @db.VarChar(255)
  name         String?        @db.VarChar(100)
  password     String         @db.VarChar(255)
  avatar       String?        @db.VarChar(500)
  currency     String?        @default("AR") @db.VarChar(3)
  language     String?        @default("EN") @db.VarChar(10)
  timezone     String?        @default("Indian/Antananarivo") @db.VarChar(50)
  theme        String?        @default("light") @db.VarChar(20)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  accounts     accounts[]
  budgets      budgets[]
  categories   categories[]
  goals        goals[]
  reminders    reminders[]
  sync_states  sync_states?
  transactions transactions[]
}

enum account_type {
  CASH
  BANK_ACCOUNT
  CREDIT_CARD
  SAVINGS
  INVESTMENT
  OTHER
}

enum budget_period {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum recurring_frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum transaction_type {
  INCOME
  EXPENSE
  TRANSFER
}
